#define DIGIT_TOP 0b00000001
#define DIGIT_MIDDLE 0b01000000
#define DIGIT_BOTTOM 0b00100000
#define DIGIT_LEFT_TOP 0b10000000
#define DIGIT_LEFT_BOTTOM 0b00000010
#define DIGIT_RIGHT_TOP 0b00001000
#define DIGIT_RIGHT_BOTTOM 0b00000100

/*
if (input == 0) {
    return DIGIT_TOP | DIGIT_BOTTOM | DIGIT_LEFT_TOP | DIGIT_LEFT_BOTTOM | DIGIT_RIGHT_TOP | DIGIT_RIGHT_BOTTOM;
  } else if (input == 1) {
    return DIGIT_RIGHT_TOP | DIGIT_RIGHT_BOTTOM;
  } else if (input == 2) {
    return DIGIT_TOP | DIGIT_MIDDLE | DIGIT_BOTTOM | DIGIT_LEFT_BOTTOM | DIGIT_RIGHT_TOP;
  } else if (input == 3) {
    return DIGIT_TOP | DIGIT_MIDDLE | DIGIT_BOTTOM | DIGIT_RIGHT_TOP | DIGIT_RIGHT_BOTTOM;
  } else if (input == 4) {
    return DIGIT_MIDDLE | DIGIT_LEFT_TOP | DIGIT_RIGHT_TOP | DIGIT_RIGHT_BOTTOM;
  } else if (input == 5) {
    return DIGIT_TOP | DIGIT_MIDDLE | DIGIT_BOTTOM | DIGIT_LEFT_TOP | DIGIT_RIGHT_BOTTOM;
  } else if (input == 6) {
    return DIGIT_TOP | DIGIT_MIDDLE | DIGIT_BOTTOM | DIGIT_LEFT_TOP | DIGIT_LEFT_BOTTOM | DIGIT_RIGHT_BOTTOM;
  } else if (input == 7) {
    return DIGIT_TOP | DIGIT_RIGHT_TOP | DIGIT_RIGHT_BOTTOM;
  } else if (input == 8) {
    return DIGIT_TOP | DIGIT_MIDDLE | DIGIT_BOTTOM | DIGIT_LEFT_TOP | DIGIT_LEFT_BOTTOM | DIGIT_RIGHT_TOP | DIGIT_RIGHT_BOTTOM;
  } else if (input == 9) {
    return DIGIT_TOP | DIGIT_MIDDLE | DIGIT_LEFT_TOP | DIGIT_RIGHT_TOP | DIGIT_RIGHT_BOTTOM;
  } else {
    return 0;
    */
